import { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const VerifyEmailPage = () => {
  const { token } = useParams();

  useEffect(() => {
    async function verifyEmail(token) {
      try {
        const response = await axios.get(`/verify/${token}`);
        // Process the response if needed
        console.log(response.data);
      } catch (error) {
        // Handle errors
        console.error(error);
      }
    }

    verifyEmail(token);
  }, [token]);

  return (
    <div>
      <h1>Email Verification Page</h1>
      {/* Other components and content */}
    </div>
  );
};
export default VerifyEmailPage;

/**
*! Q)From where does this client side code getting the verificationToken named as token here ? I mean 
*! verification token is generated by the server side via const verificationToken = generateVerificationToken();
Ans)The token value in the client-side code is being obtained from the URL using the useParams hook from the 
react-router-dom library. The useParams hook returns an object containing the route parameters extracted from 
the URL path. In this case, the route is defined to include a token parameter, so the value of the token parameter
can be accessed using const { token } = useParams().

The value of the token parameter in the URL should be the verification token that was generated by the server-side
code and included in the verification link sent to the user’s email address. When the user clicks on the 
verification link, their browser will navigate to the URL specified in the link, which should include the 
verification token as a route parameter. The client-side code can then extract the verification token from the 
URL using the useParams hook and use it to verify the user’s email address.

*! Q)But how does the client side code understand that it has to extract the verificationToken of the email only? 
*! There are so many other verification token flying around. Doesn't the code gets confused about which token to 
*! actually pick up?
Ans)The client-side code knows which verification token to extract from the URL because the verification token is 
included as a route parameter in the URL path. When the server-side code generates the verification link, it 
includes the verification token as a route parameter in the URL. For example, if the verification token is 12345, 
the verification link might look like this: http://localhost:3000/verify/12345.

When the user clicks on the verification link, their browser navigates to the specified URL, which includes the 
verification token as a route parameter. The client-side code can then use the useParams hook from the react-rout
er-dom library to extract the value of the token route parameter from the URL path. Since the value of the token 
route parameter is set by the server-side code when generating the verification link, it will always be the 
correct verification token for that user.

*! Q)What does useParams do ?
Ans)`useParams` is a hook from the `react-router-dom` library that returns an object containing the route 
parameters extracted from the URL path. Route parameters are named segments of the URL path that are defined 
using a colon (`:`) followed by the parameter name. For example, in the route path `/verify/:token`, `:token` is 
a route parameter named `token`.

When a user navigates to a URL that matches the route path, the value of the route parameter is extracted from 
the URL and made available to the component via the `useParams` hook. For example, if a user navigates to the 
URL `/verify/12345`, the value of the `token` route parameter would be `'12345'`.

Here's an example of how you could use the `useParams` hook to extract the value of a route parameter:

import { useParams } from 'react-router-dom';

function MyComponent() {
  const { token } = useParams();
  // ...
}

In this example, we're using object destructuring to extract the value of the `token` route parameter from the 
object returned by the `useParams` hook. The value of the `token` variable will be equal to the value of the 
`token` route parameter in the URL.
*/